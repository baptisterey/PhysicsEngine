#pragma once

#include "Base/IPhysicComponent.h"
#include "../Math/Quaternion.h"
#include "../Math/Vector3.h"
#include "./ForceGenerators/IForceGenerator.h"
#include "./ForceGenerators/Forces/GravityForce.h"

#include <iostream>

class RigidBody : public IPhysicComponent, public IForceGenerator
{
public:

	/// <summary>
	/// Construct a rigidbody based on a sphere of radius.
	/// </summary>
	RigidBody(float mass, float radius, float linearDamping, float angularDamping);

	/// <summary>
	/// Construct a rigidbody based on a box of dx, dy, dz.
	/// </summary>
	RigidBody(float mass, float dx, float dy, float dz, float linearDamping, float angularDamping);

	~RigidBody();

	/// <summary>
	/// Integrate the rigidbody, dealing with linear and angular velocity.
	/// </summary>
	/// <param name="deltaTime">The time of the frame.</param>
	void UpdatePhysics(float deltaTime);

	/// <summary>
	/// Uses by the physic system and returns all the forces generated by the rigidbody for this frame (gravity...).
	/// </summary>
	/// <param name="time">The time of the frame.</param>
	/// <returns>The forces on the rigidbody for this frame.</returns>
	std::vector<IForce*> GetForces(float time);

	void SetGravity(bool value);
	bool GetGravity();

private:

	/// <summary>
	/// The global inverse inertial tensor in global space.
	/// </summary>
	Matrix3 globalInverseInertialTensor;

	/// <summary>
	/// The local inverse inertial tensor in local space.
	/// </summary>
	Matrix3 localInverseInertialTensor;

	float linearDamping, angularDamping;

	/// <summary>
	/// Set the local inverse inertial tensor as a sphere.
	/// </summary>
	/// <param name="radius">The radius of the sphere.</param>
	void SetLocalInverseInertialTensorFromSphere(float radius);

	/// <summary>
	/// Set the local inverse inertial tensor as a box.
	/// </summary>
	/// <param name="dx">The width of the box.</param>
	/// <param name="dy">The height of the box.</param>
	/// <param name="dz">The depth of the box.</param>
	void SetLocalInverseInertialTensformFromBox(float dx, float dy, float dz);

	bool gravity = true;
};
